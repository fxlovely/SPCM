#!/bin/sh -e

pause()
{
    local junk
    
    printf "Press return to continue..."
    read junk
}


usage()
{
    printf "Usage: $0 username\n"
    exit 1
}


if [ $# != 1 ]; then
    usage
fi

# head or compute node?
cluster_dir='/head_usr/local/cluster'

username=$1

uid=`awk -F ':' -v username=$username '$1 == username { print $3 }' $cluster_dir/users.txt`

if [ 0$uid = 0 ]; then
    printf "user $username is not listed in $cluster_dir/users.txt.\n"
    exit 2
fi

gid=`awk -F ':' -v username=$username '$1 == username { print $4 }' $cluster_dir/users.txt`
comment=`awk -F ':' -v username=$username '$1 == username { print $5 }' $cluster_dir/users.txt`
shell=`awk -F ':' -v username=$username '$1 == username { print $7 }' $cluster_dir/users.txt`

if [ ! -e /etc/passwd.bak ]; then
    cp /etc/passwd /etc/passwd.bak
fi

current_uid=`awk -F ':' -v username=$username '$1 == username { print $3 }' /etc/passwd`
current_gid=`awk -F ':' -v username=$username '$1 == username { print $4 }' /etc/passwd`
current_shell=`awk -F ':' -v username=$username '$1 == username { print $7 }' /etc/passwd`

if [ 0$current_uid = 0 ]; then
    printf "User $username does not exist.  Adding...\n"
    # Make sure group exists first
    cmd="pw useradd $username -u $uid -g $gid -c '$comment' -s $shell"
    $cmd
elif [ $uid != $current_uid ] || [ $gid != $current_gid ]; then
    printf "Current user $username (${current_uid}:$current_gid) does not match cluster user (${uid}:$gid).  Fixing...\n"
    
    # Correct everything in user entry, since the elif does not look
    # at comment or shell
    cmd="pw usermod $username -u $uid -g $gid -c '$comment' -s $shell"
    eval $cmd

    # Find files owned by the old uid or gid and correct them
    for dir in /home /share[0-9]*/Data; do
	printf "Correcting file ownership in $dir...\n"
	find $dir/$username -uid $current_uid -exec chown $uid '{}' \;
	find $dir/$username -gid $current_gid -exec chown $gid '{}' \;
    done
elif [ $shell != $current_shell ]; then
    printf "Current user $username shell ($current_shell) does not match cluster user ($shell).  Fixing...\n"
    
    # Just correct comment and shell, since we know the uid and gid are correct
    set -x
    cmd="pw usermod $username -u $uid -g $gid -c '$comment' -s $shell"
    eval $cmd
fi

if [ ! -e /home/$username/.ssh/authorized_keys2 ]; then
    cluster-ssh-keygen $username $gid
fi

