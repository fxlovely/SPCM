#!/bin/sh -e

usage()
{
    printf "Usage: $0 head|compute\n"
    exit 1
}


pause()
{
    local junk
    
    printf 'Press return to continue...'
    read junk
}


if [ $# != 1 ]; then
    usage
fi

node_type=$1
if [ $node_type != 'head' ] && [ $node_type != 'compute' ]; then
    usage
fi

export AUTO_BUILD_FROM_SOURCE='yes'

# Install munge
if [ ! -e /usr/ports/security/munge ]; then
    auto-update-port-framework -c security/munge
fi
auto-install-packages security/munge
# FIXME: This should not be necessary
# mkdir -p /var/log/munge /var/run/munge

if [ ! -e /usr/ports/devel/libsysinfo ]; then
    auto-update-port-framework -c devel/libsysinfo
fi
auto-install-packages devel/libsysinfo

# Generate munge.key
/usr/local/etc/rc.d/munged stop
munge_dir='/usr/local/etc/munge'
if [ $node_type == 'head' ]; then
    if [ ! -e $munge_dir/munge.key ]; then
	mkdir -p -m 0700 $munge_dir
	touch $munge_dir/munge.key
	chmod 400 $munge_dir/munge.key
	printf "Generating munge key...\n"
	dd if=/dev/random bs=1 count=1024 > $munge_dir/munge.key
    fi
else
    # Could use munge_flags="--key-file /head_usr/local/etc/munge/munge.key"
    head_munge=/head_usr/local/etc/munge/munge.key
    if [ -e $head_munge ]; then
	# munge_keyfile not working with rc script
	# auto-append-line munged_flags \
	#    'munged_keyfile="/head_usr/local/etc/munge/munge.key"' \
	#    /etc/rc.conf $0
	mkdir -p -m 0700 $munge_dir
	cp $head_munge $munge_dir
    elif [ ! -e $munge_dir/munge.key ]; then
	printf 'Securely copy $munge_dir from the head node, preserving ownership and permissions.'
	pause
    fi
fi

# Enable munge
auto-enable-service munged $0
service munged restart

# Make sure slurm UID and GID are registered
uids='/usr/ports/UIDs'
if ! fgrep -q slurm $uids; then
    awk -F ':' '
    {
	if ( $1 == "_bbstored" )
	{
	    print "slurm:*:467:467::0:0:SLURM Daemon:/home/slurm:/usr/sbin/nologin";
	    print $0;
	}
	else
	{
	    print $0;
	}
    }' $uids > $uids.new
    if [ ! -e $uids.orig ]; then
	cp $uids $uids.orig
    fi
    mv $uids.new $uids
fi

gids='/usr/ports/GIDs'
if ! fgrep -q slurm $gids; then
    awk -F ':' '
    { 
	if ( $1 == "_bbstored" )
	{
	    print "slurm:*:467:"
	    print $0;
	}
	else
	{
	    print $0;
	}
    }' $gids > $gids.new
    if [ ! -e $gids.orig ]; then
	cp $gids $gids.orig
    fi
    mv $gids.new $gids
fi

# auto-install-packages sysutils/slurm-hpc
printf "Reinstall slurm? (y/[n]) "
read reinstall
if [ 0$reinstall = 0y ]; then
    reinstall-wip-port -u -r slurm-hpc
fi

if [ $node_type = 'head' ]; then
    slurm_conf='/usr/local/etc/slurm.conf'
    if [ ! -e $slurm_conf ]; then
	cp /usr/local/share/examples/slurm/slurm.conf $slurm_conf
    fi
    vi $slurm_conf
    auto-enable-service slurmctld $0
else
    default_slurm_conf='/head_usr/local/etc/slurm.conf'
    printf "slurm.conf? [$default_slurm_conf] "
    read slurm_conf
    if [ 0$slurm_conf = 0 ]; then
	slurm_conf=$default_slurm_conf
    fi
    auto-append-line slurmd_flags "slurmd_flags=\"-f $slurm_conf\"" \
	/etc/rc.conf $0
    auto-enable-service slurmd $0
    printf "Make sure $slurm_conf is accessible from this node.\n"
    pause
fi

# Generate default config file
# firefox /usr/local/share/doc/slurm-*/html/configurator.html

# Make sure StateSaveLocation is owned by slurm:slurm and shared with
# compute nodes.

# Make sure SlurmdSpoolDir is *not* shared.  Owned by root.

# Unix process group ID?

# Job accounting Gather: Create option for FreeBSD

