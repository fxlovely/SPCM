#!/bin/sh -e

##########################################################################
#   Script description:
#       
#   Arguments:
#       
#   Returns:
#       
#   History:
#   Date        Name        Modification
#   2014-01-02  root        Begin
##########################################################################

usage()
{
    printf "Usage: $0 [user-name]\n"
    exit 1
}


##########################################################################
#   Function description:
#       Pause until user presses return
##########################################################################

pause()
{
    local junk
    
    printf "Press return to continue..."
    read junk
}

##########################################################################
#   Main
##########################################################################

if [ `hostname -s` != 'login' ]; then
    printf "$0 can only be run on the primary login node.\n"
    exit 1
fi

if [ $# -gt 1 ]; then
    usage
fi

if [ $# = 1 ]; then
    user_name="$1"
else
    user_name=`whoami`
fi

cat << EOM
==========================================================================
Changing cluster password for $user_name...
==========================================================================

Do not share your passphrase with anyone, including your adviser or
other lab members.  Files can be shared by setting group permissions.
See the user's guide or contact your facilitator if you need assistance.

Do not write down your passphrase anywhere or store it in a regular file.
If you want to record it, use a password vault such as KeePassX:

    http://www.keepassx.org/

A valid password should be a mix of upper and lower case letters,
digits, and other characters.

An upper case letter that begins the password and a digit that ends it do
not count towards the number of character classes used.

Users are strongly advised to use a passphrase, not a password.
A 3-word, 20-character passphrase is usually easier to remember
than an 8-character random password that is equally secure.

Do not use a '\\' or '\`' character in your password.

==========================================================================

EOM

if [ `whoami` != 'root' ]; then
    printf "Old password? "
    read -s old_pw
    printf '\n'
fi

cat << EOM

Please enter your new password twice below.  For security, the characters
will not echo.

EOM

success=0
while [ $success != 1 ]; do
    new_pw='x'
    pw2='y'
    while [ 0"$new_pw" != 0"$pw2" ]; do
	printf "Password? "
	read -s new_pw
	printf "\nAgain? "
	read -s pw2
	printf "\n"
	if [ 0"$new_pw" != 0"$pw2" ]; then
	    printf "Passwords do not match.  Please try again.\n"
	fi
    done
    
    outfile=/dev/null
    errfile=$HOME/.cluster-passwd.stderr

    # Set local password
    if [ `whoami` != 'root' ]; then
	if printf '%s\n%s\n%s\n' "$old_pw" "$new_pw" "$new_pw" | passwd \
		> $outfile 2> $errfile; then
	    success=1
	else
	    cat $errfile
	fi
    else
	if printf '%s\n%s\n' "$new_pw" "$new_pw" | passwd "$user_name" \
		> $outfile 2> $errfile; then
	    success=1
	else
	    cat $errfile
	fi
    fi
done

# Do this only for remote passwd commands, since the string passes through
# two shells
# '$' in string interpreted as start of another variable
old_pw=`echo $old_pw | sed -e 's|\\$|\\\\$|g'`
new_pw=`echo $new_pw | sed -e 's|\\$|\\\\$|g'`

nodes="`cluster-backup-nodes` `cluster-io-nodes` `cluster-vis-nodes`"
if [ 0"$user_name" = 0root ]; then
    nodes="$nodes `cluster-compute-nodes`"
fi

for node in $nodes; do
    printf "Changing password on $node...\n"
    # FIXME: Find a more portable/susainable way to remotely set passwords
    # BSD passwd does not allow redirected input.  It's surprising that
    # Linux still does.
    # Redirect pw quality messages to null but allow errors
    if [ `whoami` != 'root' ]; then
	if ! ssh $node "printf '%s\n%s\n%s\n' \"$old_pw\" \"$new_pw\" \"$new_pw\" | passwd" \
		>> $outfile 2>> $errfile; then
	    cat $errfile
	    exit 1
	fi
    else
	if ! ssh $node "printf '%s\n%s\n' \"$new_pw\" \"$new_pw\" | passwd $user_name" \
		>> $outfile 2>> $errfile; then
	    cat $errfile
	    exit 1
	fi
    fi
done

