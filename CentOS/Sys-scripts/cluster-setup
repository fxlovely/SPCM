#!/bin/sh -e

##########################################################################
#   Script description:
#       CentOS cluster node configurator
#
#   Arguments:
#       head|compute|io
#
#   Returns:
#       0 on success, non-zero error codes
#
#   History:
#   Date        Name        Modification
#   2012-10-04  Jason Bacon Begin
#               Jim Wagner  Many improvements
##########################################################################


##########################################################################
#   Function description:
#       
#   Arguments:
#       
#   Returns:
#       
#   History:
#   Date        Name        Modification
#   2013-12-14  bacon       Begin
##########################################################################

backup_file()
{
    if [ $# != 2 ] || [ ! -d $2 ]; then
	printf "Usage: backup_file file backup-dir\n"
	exit 1
    fi
    
    file=$1
    dir=$2
    
    if [ ! -e $dir/$file ]; then
	cp $file $dir
    fi
}


##########################################################################
#   Function description:
#       Pause script until user presses return.
#
#   History:
#   Date        Name        Modification
#   2012-10-04  Jason Bacon Begin
##########################################################################

pause()
{
    local junk
    
    printf "Press return to continue..."
    read junk
}


##########################################################################
#   Function description:
#       Print usage message and exit.
#
#   Arguments:
#       Program name ($0 from main)
#
#   Returns:
#       Does not return.
#
#   History:
#   Date        Name        Modification
#   2012-10-04  Jason Bacon Begin
##########################################################################

usage()
{
    printf "Usage: $0 head|compute|io\n"
    exit 1
}


line()
{
    printf '================================================================\n'
}


##########################################################################
#   Function description:
#       
#   Arguments:
#       
#   Returns:
#       
#   History:
#   Date        Name        Modification
#   2013-12-10  bacon        Begin
##########################################################################


pkgsrc_setup()
{
    line
    auto-binary-pkgsrc-setup /usr/pkg gcc-5.0

    # Add pkgsrc to current path, exclusive
    . /usr/pkg/etc/pkgsrc.sh
}


##########################################################################
#   Function description:
#       Install Infiniband packages and configure interface
#       
#   History:
#   Date        Name        Modification
#   2013-12-10  bacon        Begin
##########################################################################

ib_config()
{
    # Can we avoid using a groupinstall and just install the essential packages?
    # Are these necessary, or do we just need to enable rdma?
    # Obsolete: libibmad-devel
    yum groupinstall -y "Infiniband Support"
    yum install -y \
	libibverbs-devel \
	libibcommon-devel \
	infiniband-diags-devel \
	libibcm-devel \
	librdmacm-devel \
	infiniband-diags \
	perftest
    
    # SCSI RDMA Protocol
    # yum install -y srptools rdma
    
    # Required for ib
    case $OS_RELEASE in
    RHEL6)
	chkconfig ibacm on
	chkconfig rdma on
	service ibacm stop
	service rdma restart
	service ibacm start
	;;
    RHEL7)
	systemctl enable ibacm.service
	systemctl enable rdma.service
	sleep 5 # Guessing how to avoid ibacm start failure
	systemctl stop ibacm.service || true
	sleep 5
	# Failed to restart rdma.service: Operation refused, unit rdma.service
	# may be requested by dependency only (it is configured to refuse
	# manual start/stop).
	# systemctl restart rdma.service
	while ! systemctl start ibacm.service; do
	    printf "ibacm failed to start.  Sleeping 5 seconds and retrying...\n"
	    sleep 5
	done
	;;
    *)
	printf "Unsupported RHEL version: $OS_RELEASE\n"
	exit 1
    esac
    
    # SCSI RDMA protocol
    # Set SRP_LOAD=yes in /etc/rdma/rdma.conf
    # sed -i'.bak' 's/SRP_LOAD=no/SRP_LOAD=yes/' /etc/rdma/rdma.conf
    
    # chkconfig srpd on
    # service srpd restart

    # Enable and test IB interface
    ip addr | egrep 'mtu|inet'
    if ip link show | fgrep -q eth0; then
	default_if=eth0
    elif ip link show | fgrep -q eno1; then
	default_if=eno1
    else
	default_if=em1
    fi
    interface=`auto-ask eth-int 'Local Ethernet interface?' $default_if`
    current_ip=`ip addr show $interface | awk '$1 == "inet" { print $2 }' | awk -F / ' { print $1 }'`
    # FIXME: Specific to x.y.1.z networks
    ib_ip=`printf "$current_ip" | awk -F '.' ' { printf("%d.%d.%d.%d",$1,$2,$3+128,$4); }'`
    ib_ip=`auto-ask ib-ip 'ib0 IP address?' $ib_ip`
    
    # FIXME: Unmount NFS shares on ib0 first
    
    # Strip down ifcfg-ib0
    ip link set ib0 down
    file=/etc/sysconfig/network-scripts/ifcfg
    # FIXME: How to we generate ifcfg-ib0 with type, uuid, etc?
    touch $file-ib0
    if [ ! -e $file-ib0.orig ]; then
	cp $file-ib0 $file-ib0.orig
    fi
    #if egrep 'DEVICE|HWADDR|TYPE|UUID' $file-ib0 > temp-ib0; then
    #    printf "Preserving existing ib0 settings.\n"
    #fi
    hwaddr=`ip addr show ib0 | awk '$1 == "link/infiniband" { print $2 }'`
    netmask='255.255.192.0'
    netmask=`auto-ask ib-netmask 'ib0 netmask?' $netmask`
    cat << EOM > $file-ib0
DEVICE=ib0
HWADDR=$hwaddr
NETMASK=$netmask
TYPE=InfiniBand
IPADDR=$ib_ip
BOOTPROTO=none
ONBOOT=yes
CONNECTED_MODE=yes
EOM
    # Causes network to hang if done remotely
    # Start ib0 by other means
    ip link set ib0 up
    
    # Fails on first try.  Guessing at solution...
    sleep 5
    
    case $OS_RELEASE in
    RHEL6)
	service network restart
	;;
    RHEL7)
	systemctl restart network.service
	;;
    *)
	printf "Unsupported RHEL version: $OS_RELEASE\n"
	exit 1
    esac
    
    ip addr show ib0
    
    # Add ib interface to /etc/hosts
    printf "Add ib0 interace to /etc/hosts on all nodes.\n"
    pause
    
    # Set ipath lanes to twice the number of cores?
}


##########################################################################
#   Function description:
#       
#   Arguments:
#       
#   Returns:
#       
#   History:
#   Date        Name        Modification
#   2013-12-10  bacon        Begin
##########################################################################

ntp_config()
{
    line
    printf "Running ntpdate...\n"
    # Start with correct date
    yum install -y ntp ntpdate
    ntpdate -u pool.ntp.org
    case $OS_RELEASE in
    RHEL6)
	chkconfig ntpd on
	# FIXME: Why not restart?
	service ntpd stop
	service ntpd start
	;;
    RHEL7)
	systemctl enable ntpd
	systemctl restart ntpd.service
	;;
    *)
	printf "Unsupported RHEL version: $OS_RELEASE\n"
	exit 1
    esac
}


##########################################################################
#   Function description:
#       
#   Arguments:
#       
#   Returns:
#       
#   History:
#   Date        Name        Modification
#   2013-12-10  bacon        Begin
##########################################################################

boot_block_backup()
{
    # Save boot block for restoring software RAID
    if [ ! -e /root/Save/boot-block.$NODE_TYPE ]; then
	line
	printf "Backing up boot block...\n"
	mkdir -p /root/Save
	dd if=/dev/sda of=/root/Save/boot-block.$NODE_TYPE bs=512 count=1
    fi
}


##########################################################################
#   Function description:
#       
#   Arguments:
#       
#   Returns:
#       
#   History:
#   Date        Name        Modification
#   2013-12-10  bacon        Begin
##########################################################################

nfs_config()
{
    line
    nfs=`auto-ask nfs 'Configure NFS?' y`
    if [ $nfs = 'n' ]; then
	return 0
    fi
    
    # Install NFS to all nodes
    # https://www.unixmen.com/setting-nfs-server-client-centos-7/
    printf "Installing NFS utilities...\n"
    yum install -y nfs-utils
    
    idmapd_domain=`auto-ask idmapd-domain 'IDMAPD domain for NFS4?' cluster`
    sed -i "s|.*Domain = .*|Domain = $idmapd_domain|" /etc/idmapd.conf
    
    case $OS_RELEASE in
    RHEL6)
	service rpcidmapd restart
	;;
    RHEL7)
	systemctl restart rpcidmapd.service
	;;
    *)
	printf "Unsupported RHEL version: $OS_RELEASE\n"
	exit 1
    esac

    case $OS_RELEASE in
    RHEL6)
	chkconfig rpcbind on
	chkconfig nfslock on
	chkconfig nfs on
	;;
    RHEL7)
	systemctl enable rpcbind
	systemctl enable nfs-server
	systemctl enable nfs-lock
	systemctl enable nfs-idmap
	;;
    *)
	printf "Unsupported RHEL version: $OS_RELEASE\n"
	exit 1
    esac

    # Configure shared directories
    case $NODE_TYPE in
    'head'|'io')
	default_range='192.168.0.0/16'
	range=`auto-ask nfs-range 'NFS export range?' $default_range`
	
	printf '\nCurrent local mounts:\n\n'
	df -l
	
	printf '\nCurrent exports:\n\n'
	cat /etc/exports
	printf '\n'
	
	export='prime'
	while [ x$export != x ]; do
	    printf 'Enter another path to export, or press return to move on: '
	    read export
	    
	    # Add to NFS exports if not already there
	    auto-append-line "$export" \
		"$export $range(rw,no_root_squash)" \
		/etc/exports $0
	done
	    
	case $OS_RELEASE in
	RHEL6)
	    service rpcbind restart
	    service nfslock restart
	    service nfs restart
	    ;;
	RHEL7)
	    systemctl restart rpcbind
	    systemctl restart nfs-server
	    systemctl restart nfs-lock
	    systemctl restart nfs-idmap
	    ;;
	*)
	    printf "Unsupported RHEL version: $OS_RELEASE\n"
	    exit 1
	esac
    
	# Signal NFS daemon to update exports
	# Unnecessary after restarting daemons?
	# exportfs -a
	;;
    esac
    
    printf "Currently configured mounts:\n\n"
    awk '$3 == "nfs" { print $0 }' /etc/fstab
    
    case $NODE_TYPE in
    'compute'|'io')
	# Compute nodes
	script=/usr/local/cluster/add-shares
	if [ -e $script ]; then
	    printf "Automatically configuring shares with $script...\n"
	    sh $script || true
	else
	    nfs_server='prime'
	    while [ x$nfs_server != x ]; do
		printf 'Enter an NFS server to mount from, or press return to move on: '
		read nfs_server
		
		if [ 0$nfs_server != 0 ]; then
		    printf "Exported directory to mount? "
		    read export
		    # Add to fstab if not already there
		    auto-append-line "$export$num" \
			"${nfs_server}:$export\t$export\tnfs\trw,intr\t0\t0" \
			/etc/fstab nocomment
		    mkdir -p $export
		fi
	    done
	fi
	
	case $OS_RELEASE in
	RHEL6)
	    service rpcbind restart
	    service nfslock restart
	    service nfs restart
	    ;;
	RHEL7)
	    systemctl restart rpcbind.service
	    systemctl restart nfslock.service
	    systemctl restart nfs
	    ;;
	*)
	    printf "Unsupported RHEL version: $OS_RELEASE\n"
	    exit 1
	esac

	# mount and test
	mount -a
	df
    esac
}


##########################################################################
#   Function description:
#       
#   Arguments:
#       
#   Returns:
#       
#   History:
#   Date        Name        Modification
#   2013-12-10  bacon        Begin
##########################################################################

install_core_rpms()
{
    line
    printf "Installing man pages...\n"
    yum install -y man man-pages
    
    printf "Installing core utilities...\n"
    yum install -y \
	sysstat \
	bind-utils \
	ksh tcsh zsh \
	finger \
	bc \
	mailx \
	parted \
	lsof \
	words \
	environment-modules \
	yum-utils \
	dmidecode
    # No such package yum install -y impitool     # Remote management and LOM
    
    if [ $NODE_TYPE = compute ]; then
	yum install -y openmpi-devel numactl numactl-devel
    fi

    # Install compilers, etc.
    line
    printf "Installing base development tools...\n"
    # gcc-* and cvs required for pkgsrc
    yum install -y gcc gcc-c++ gcc-gfortran gdb

    # Enable X11 apps without installing a desktop system like KDE
    line
    printf "Enabling X11 apps without installing desktop...\n"
    yum install -y xauth
}


##########################################################################
#   Function description:
#       
#   Arguments:
#       
#   Returns:
#       
#   History:
#   Date        Name        Modification
#   2013-12-10  bacon        Begin
##########################################################################

ssh_config()
{
    # Enable incoming ssh
    line
    printf 'Configuring sshd...\n'
    
    case $OS_RELEASE in
    RHEL6)
	chkconfig sshd on
	service sshd restart
	;;
    RHEL7)
	systemctl enable sshd.service
	systemctl restart sshd.service
	;;
    *)
	printf "Unsupported RHEL version: $OS_RELEASE\n"
	exit 1
    esac

    # Enable passwordless ssh so we can distribute hosts entries below
    if [ ! -e /root/.ssh/id_rsa ]; then
	printf "Setting up public key...\n"
	ssh-keygen -f /root/.ssh/id_rsa -N ""
    else
	printf "id_rsa already exists.\n"
    fi

    if [ $NODE_TYPE = 'head' ]; then
	cat << EOM > /etc/profile.d/ssh-keygen.sh
# Generated by cluster-setup
if [ ! -f ~/.ssh/id_rsa ]; then
    ssh-keygen -f ~/.ssh/id_rsa -N ""
    cat ~/.ssh/id_rsa.pub > ~/.ssh/authorized_keys
    chmod 600 ~/.ssh/authorized_keys
fi
EOM

	cat << EOM > /etc/profile.d/ssh-keygen.csh
# Generated by cluster-setup
if ( ! -f ~/.ssh/id_rsa ) then
    ssh-keygen -f ~/.ssh/id_rsa -N ""
    cat ~/.ssh/id_rsa.pub > ~/.ssh/authorized_keys
    chmod 600 ~/.ssh/authorized_keys
endif
EOM
	chmod 755 /etc/profile.d/ssh-keygen.*sh
    fi
    
    # FIXME: Set PermitRootLogin to without-password on nodes with a public
    # interface.
}


##########################################################################
#   Function description:
#       
#   Arguments:
#       
#   Returns:
#       
#   History:
#   Date        Name        Modification
#   2014-05-02  bacon        Begin
##########################################################################

cluster_startup_scripts()
{
    ln -sf /usr/pkg/etc/profile.d/* /etc/profile.d
}


##########################################################################
#   Function description:
#       
#   Arguments:
#       
#   Returns:
#       
#   History:
#   Date        Name        Modification
#   2014-05-02  root        Begin
##########################################################################

slurm_install()
{
    case $NODE_TYPE in
    'head'|'compute')
	if ! pkg_info -e slurm; then
	    pkgin install -y slurm-wlm
	else
	    if ! fgrep slurm /etc/passwd; then
		printf "Run node-sync-user `hostname` slurm from the head node\n"
		pause
	    fi
	fi
	cluster-munge-enable $NODE_TYPE
	cluster-slurm-enable $NODE_TYPE
	;;
    'io')
	;;
    esac
}


##########################################################################
#   Function description:
#       
#   Arguments:
#       
#   Returns:
#       
#   History:
#   Date        Name        Modification
#   2014-05-02  root        Begin
##########################################################################

ganglia_install()
{
    if [ $# != 0 ]; then
	printf "Usage: ganglia_install\n"
	exit 1
    fi
    
    # Redundant check due to name diff between pkg and port
    if ! pkg_info ganglia-monitor-core > /dev/null; then
	pkgin install -y ganglia-monitor-core
    fi

    case $OS_RELEASE in
    RHEL6)
	ln -sf /usr/pkg/share/examples/ganglia/gmond.init.linux \
	    /etc/init.d/gmond
	chkconfig --add gmond
	chkconfig gmond on
	service gmond restart
	;;
    
    RHEL7)
	# FIXME: ganglia pkg should create this
	mkdir -p /usr/pkg/var/run/
	systemctl disable gmond.service || true
	systemctl enable /usr/pkg/share/examples/ganglia/gmond.service
	systemctl daemon-reload
	systemctl restart gmond.service
	;;
    
    *)
	printf "Unsupported RHEL version: $OS_RELEASE\n"
	exit 1
	;;
    
    esac

    if [ $NODE_TYPE = head ]; then
	ganglia-web-setup
    fi
}


##########################################################################
#   Function description:
#       
#   Arguments:
#       
#   Returns:
#       
#   History:
#   Date        Name        Modification
#   2014-05-02  root        Begin
##########################################################################

disable_overcommit()
{
    # Tighten memory allocation to prevent overcommits from crashing nodes
    # Memory limits are controlled primarily by the scheduler, but
    # this is done on a sampling basis and overcommits could happen
    # between samples.
    # vm.memory_overcommit
    #   0 = Default: Heuristic, overcommit_ration, and OOM killer
    #   1 = Unlimited overcommit (all mallocs succeed)
    #   2 = No overcommit.  Configure enough swap to allow some slack.
    auto-append-line 'vm.overcommit_memory = 2' /etc/sysctl.conf $0
    sysctl vm.overcommit_memory='2'
    auto-append-line 'vm.overcommit_ratio = 100' /etc/sysctl.conf $0
    sysctl vm.overcommit_ratio='100'
}


##########################################################################
#   Function description:
#       
#   Arguments:
#       
#   Returns:
#       
#   History:
#   Date        Name        Modification
#   2014-11-14  root        Begin
##########################################################################

authorize_ssh()
{
    # Authorize ssh to and from head nodes
    line
    cat << EOM
    
You may now specify other hosts in the cluster to and from which
$(hostname) should not require a password for ssh.
    
EOM
    
    ssh_host='x'
    while [ 0$ssh_host != 0 ]; do
	printf "Hostname or IP of node? [Just press return if there are no more] "
	read ssh_host
	if [ 0$ssh_host != 0 ]; then
	    printf "Make sure $ssh_host has PermitRootLogin=yes.\n"
	    pause
	    auto-ssh-authorize $ssh_host
	    ssh -t $ssh_host auto-ssh-authorize `hostname`
	fi
    done
}


##########################################################################
#   Main
##########################################################################

# Quit on first error
set -e

if [ `whoami` != root ]; then
    printf "$0 must be run by root.\n"
    exit 1
fi

if [ $# != 1 ]; then
    usage $0
fi

cat << EOM

This is a new cluster-setup script, heavily modified from the original.
It has not been tested on CentOS 6.  Use cluster-setup.old to ensure
compatibiliity.

Proceed with caution and watch for issues!

EOM
pause

# Caution: 
# The line below is modified by install.sh. Be careful not to replace
# %%PREFIX%% with a hard-coded prefix from an installed script.
prefix=/usr/pkg

NODE_TYPE=$1
OS_RELEASE=`auto-os-release`

case $NODE_TYPE in
'head'|'compute'|'io')
    ;;
*)
    usage $0
    ;;
esac

if [ -e /root/Save/node-configured ]; then
    printf "Node already configured.  Reconfigure? [n] "
    read reconfig
    if [ 0$reconfig != 0y ]; then
	exit 0
    fi
fi

for file in /root/.ssh /etc/fstab; do
    if [ ! -e $file.backup ]; then
	printf 'Backing up $file...\n'
	cp -R $file $file.backup
    fi
done

if [ $NODE_TYPE != head ]; then
    cat << EOM

1)  Make sure /etc/hosts is up-to-date on all nodes.
2)  Run cluster-sync-pkgsrc on the head node if `hostname` is out of date.
    This is done automatically by cluster-init-node.

EOM
    pause
fi

# Save downloaded RPMs
sed -i 's|keepcache=0|keepcache=1|' /etc/yum.conf

START_DIR=`pwd`
export PATH=${PATH}:$START_DIR

#########################################
# Basic tasks that do not require pkgsrc

boot_block_backup
ntp_config
install_core_rpms
pkgsrc_setup

pkgin install -y cvs subversion git rsync
yum remove -y cvs subversion git rsync
yum autoremove -y

cd /usr/pkgsrc
# FIXME: Commit and use pkgin
for pkg in denyhosts; do
    cd /usr/pkgsrc/wip/$pkg
    bmake install
done

# Configure firewall
auto-enable-passwdqc
cluster-firewalld-config

# After core_rpms.  Requires gcc.
printf "Run harden script? y/[n] "
read harden
if [ 0$harden = 0y ]; then
    auto-harden
fi

ib=`auto-ask ib-config 'Configure Infiniband?' y`
if [ $ib = y ]; then
    ib_config
fi

nfs_config
ssh_config

# Common packages
for pkg in iperf; do
    pkgin install -y $pkg
done
ganglia_install

disable_overcommit

cluster_startup_scripts

case $NODE_TYPE in
'head')
    # Allow root ssh or other remote execution only with keys
    # On by default in CentOS
    
    # Set up cluster-run env to allow running a command on all nodes
    # ( Initially for updating /etc/hosts )

    # Set per-process memory limits to a fraction of RAM
    auto-set-memory-limits 16777216
    auto-set-umask 027
    
    kickstart=`auto-ask pxe-server 'Enable PXE installation server?' y`
    if [ $kickstart = 'y' ]; then
	iso_path=`auto-ask pxe-iso-path 'Full pathname of ISO image? ' ''`
	auto-pxe-installer-setup $iso_path
    fi
    ;;

'compute')    # Compute nodes
    # Do this in cluster-init-node authorize_ssh
    cluster-set-compute-memory-limits
    
    # Set default OMP threads to 1 for all jobs
    ;;

'io')
    # Do this in cluster-init-node authorize_ssh
    ;;

esac

# Do this LAST to ensure node is fully operational before going live
case $NODE_TYPE in
'head'|'compute')
    slurm_install
    ;;
*)
    ;;
esac

# Save Kickstart file
mkdir -p /root/Save
backup_file ~/anaconda-ks.cfg /root/Save

if ! fgrep -q clusteradmin /etc/passwd; then
    printf "Adding cluster-admin user...\n"
    cluster-adduser clusteradmin
fi

printf "Checking/setting UID limits...\n"
cluster-lowest-uid
cluster-highest-uid

printf 'Reboot? [y]/n '
read reboot
if [ 0$reboot != 0n ]; then
    shutdown -r now
fi

touch /root/Save/node-configured
