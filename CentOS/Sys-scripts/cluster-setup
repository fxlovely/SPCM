#!/bin/sh -e

##########################################################################
#   Script description:
#       CentOS cluster node configurator
#
#   Arguments:
#       head|compute|io
#
#   Returns:
#       0 on success, non-zero error codes
#
#   History:
#   Date        Name        Modification
#   2012-10-04  Jason Bacon Begin
#               Jim Wagner  Many improvements
##########################################################################


##########################################################################
#   Function description:
#       
#   Arguments:
#       
#   Returns:
#       
#   History:
#   Date        Name        Modification
#   2013-12-14  bacon       Begin
##########################################################################

backup_file()
{
    if [ $# != 2 ] || [ ! -d $2 ]; then
	printf "Usage: backup_file file backup-dir\n"
	exit 1
    fi
    
    file=$1
    dir=$2
    
    if [ ! -e $dir/$file ]; then
	cp $file $dir
    fi
}


##########################################################################
#   Function description:
#       Pause script until user presses return.
#
#   History:
#   Date        Name        Modification
#   2012-10-04  Jason Bacon Begin
##########################################################################

pause()
{
    local junk
    
    printf "Press return to continue..."
    read junk
}


##########################################################################
#   Function description:
#       Print usage message and exit.
#
#   Arguments:
#       Program name ($0 from main)
#
#   Returns:
#       Does not return.
#
#   History:
#   Date        Name        Modification
#   2012-10-04  Jason Bacon Begin
##########################################################################

usage()
{
    printf "Usage: $0 head|compute|io\n"
    exit 1
}


line()
{
    printf '================================================================\n'
}


##########################################################################
#   Function description:
#       Convenience pkgsrc installer
#
#   Arguments:
#       1)  category
#       2)  package
#
#   Returns:
#       NA: Whole script terminates on first failed command
#
#   History:
#   Date        Name        Modification
#   2013-02-15  Jason Bacon Begin
##########################################################################

pkgsrc_install_packages()
{
    if [ $# -lt 3 ]; then
	printf "Usage: pkgsrc_install_packages pkgsrc-prefix pkgsrc-suffix category/package [category/package ...]\n"
	exit 1
    fi

    local pkgsrc_prefix=$1
    local pkgsrc_suffix=$2

    shift
    for pkg in $@; do
	line
	if pkg_info `basename $pkg`; then
	    printf "$pkg is already installed.\n"
	else
	    printf "Installing $pkg...\n"
	    pkg_name=`echo $pkg | cut -d '/' -f 2`
	    pkg_path=$pkgsrc_prefix/pkgsrc${pkgsrc_suffix}/packages/All/$pkg_name*.tgz
	    save_cwd=`pwd`
	    cd $pkgsrc_prefix/pkgsrc${pkgsrc_suffix}/$pkg
	    if [ -e "$pkg_path" ]; then
		printf "Using binary package $pkg_path...\n"
		bmake bin-install
	    else
		printf "Building $pkg from source...\n"
		env ALLOW_VULNERABLE_PACKAGES=yes bmake install
	    fi
	    #bmake clean
	    #bmake clean-depends
	    cd $save_cwd
	fi
    done
}


##########################################################################
#   Function description:
#       
#   Arguments:
#       
#   Returns:
#       
#   History:
#   Date        Name        Modification
#   2013-12-10  bacon        Begin
##########################################################################

pkgsrc_setup()
{
    if [ $# != 2 ]; then
	printf "Usage: pkgsrc_setup prefix suffix\n"
	exit 1
    fi
    
    line
    local pkgsrc_prefix=$1
    local pkgsrc_prefix=$2

    if [ ! -e $pkgsrc_prefix/pkg ]; then
	printf "Installing pkgsrc in $pkgsrc_prefix...\n"
	auto-pkgsrc-setup $pkgsrc_prefix
    fi
    
    # FIXME: restore PATH after install in case this function is
    # executed more than once.
    # old_path=$PATH
    export PATH=${PATH}:$pkgsrc_prefix/pkg${pkgsrc_suffix}/bin:$pkgsrc_prefix/pkg${pkgsrc_suffix}/sbin
    # export PATH=$old_path
}


##########################################################################
#   Function description:
#       
#   Arguments:
#       
#   Returns:
#       
#   History:
#   Date        Name        Modification
#   2013-12-10  bacon        Begin
##########################################################################

pkgsrc_append_default_path()
{
    if [ $# != 2 ]; then
	printf "Usage: pkgsrc_append_default_path prefix suffix\n"
	exit 1
    fi
    
    # Add Pkgsrc binaries to path
    line
    local pkgsrc_prefix=$1
    local pkgsrc_suffix=$2
    
    printf "Installing startup scripts...\n"
    cp $pkgsrc_prefix/pkg${pkgsrc_suffix}/etc/pkgsrc.*sh /etc/profile.d
    chmod +x /etc/profile.d/pkgsrc.*sh
    . /etc/profile
    return 0
}


##########################################################################
#   Function description:
#       
#   Arguments:
#       
#   Returns:
#       
#   History:
#   Date        Name        Modification
#   2013-12-10  bacon        Begin
##########################################################################

ib_config()
{
    # Can we avoid using a groupinstall and just install the essential packages?
    # Are these necessary, or do we just need to enable rdma?
    yum groupinstall -y "Infiniband Support"
    yum install -y \
	libibverbs-devel \
	libibcommon-devel \
	libibmad-devel \
	libibcm-devel \
	librdmacm-devel \
	infiniband-diags \
	perftest
    
    # SCSI RDMA Protocol
    # yum install -y srptools rdma
    
    # Required for ib
    chkconfig ibacm on
    chkconfig rdma on
    service ibacm stop
    service rdma restart
    service ibacm start
    
    # SCSI RDMA protocol
    # Set SRP_LOAD=yes in /etc/rdma/rdma.conf
    # sed -i'.bak' 's/SRP_LOAD=no/SRP_LOAD=yes/' /etc/rdma/rdma.conf
    
    # chkconfig srpd on
    # service srpd restart

    # Enable and test IB interface
    ip link show
    if ip link show | fgrep -q eth0; then
	default_if=eth0
    else
	default_if=em1
    fi
    interface=`auto-ask eth-int 'Local Ethernet interface?' $default_if`
    current_ip=`ip addr show $interface | awk '$1 == "inet" { print $2 }' | awk -F / ' { print $1 }'`
    # FIXME: Specific to x.y.1.z networks
    ib_ip=`printf "$current_ip" | awk -F '.' ' { printf("%d.2.%d.%d",$1,$3,$4); }'`
    ib_ip=`auto-ask ib-ip 'ib0 IP address?' $ib_ip`
    
    # FIXME: Unmount NFS shares on ib0 first
    
    # Strip down ifcfg-ib0
    ip link set ib0 down
    file=/etc/sysconfig/network-scripts/ifcfg
    # FIXME: How to we generate ifcfg-ib0 with type, uuid, etc?
    touch $file-ib0
    if [ ! -e $file-ib0.orig ]; then
	cp $file-ib0 $file-ib0.orig
    fi
    #if egrep 'DEVICE|HWADDR|TYPE|UUID' $file-ib0 > temp-ib0; then
    #    printf "Preserving existing ib0 settings.\n"
    #fi
    #mv temp-ib0 $file-ib0
    # FIXME
    hwaddr=`ip addr show ib0 | awk '$1 == "link/infiniband" { print $2 }'`
    # FIXME: Make this user input
    netmask='255.255.252.0'
    netmask=`auto-ask ib-netmask 'ib0 netmask?' $netmask`
    cat << EOM > $file-ib0
DEVICE=ib0
HWADDR=$hwaddr
NETMASK=$netmask
TYPE=InfiniBand
IPADDR=$ib_ip
BOOTPROTO=none
ONBOOT=yes
CONNECTED_MODE=yes
EOM
    # Causes network to hang if done remotely
    # Start ib0 by other means
    # service network restart
    ip link set ib0 up
    service network restart
    ip addr show ib0
    
    # Add ib interface to /etc/hosts
    printf "Add ib0 interace to /etc/hosts on all nodes.\n"
    pause
    
    # Set ipath lanes to twice the number of cores?
}


##########################################################################
#   Function description:
#       
#   Arguments:
#       
#   Returns:
#       
#   History:
#   Date        Name        Modification
#   2013-12-10  bacon        Begin
##########################################################################

ntp_config()
{
    line
    printf "Running ntpdate...\n"
    # Start with correct date
    yum install -y ntp ntpdate
    ntpdate -u pool.ntp.org
    chkconfig ntpd on
    service ntpd stop
    service ntpd start
}


##########################################################################
#   Function description:
#       
#   Arguments:
#       
#   Returns:
#       
#   History:
#   Date        Name        Modification
#   2013-12-10  bacon        Begin
##########################################################################

boot_block_backup()
{
    # Save boot block for restoring software RAID
    if [ ! -e /root/Save/boot-block.$NODE_TYPE ]; then
	line
	printf "Backing up boot block...\n"
	mkdir -p /root/Save
	dd if=/dev/sda of=/root/Save/boot-block.$NODE_TYPE bs=512 count=1
    fi
}


##########################################################################
#   Function description:
#       
#   Arguments:
#       
#   Returns:
#       
#   History:
#   Date        Name        Modification
#   2013-12-10  bacon        Begin
##########################################################################

nfs_config()
{
    line
    nfs=`auto-ask nfs 'Configure NFS?' y`
    if [ $nfs = 'n' ]; then
	return 0
    fi
    
    # Install NFS to all nodes
    printf "Installing NFS utilities...\n"
    yum install -y nfs-utils
    
    idmapd_domain=`auto-ask idmapd-domain 'IDMAPD domain for NFS4?' cluster`
    sed -i "s|.*Domain = .*|Domain = $idmapd_domain|" /etc/idmapd.conf
    service rpcidmapd restart

    chkconfig rpcbind on
    chkconfig nfslock on
    chkconfig nfs on

    # Configure shared directories
    case $NODE_TYPE in
    'head'|'io')
	default_range='192.168.0.0/22'
	range=`auto-ask nfs-range 'NFS export range?' $default_range`
	
	printf '\nCurrent exports:\n\n'
	cat /etc/exports
	printf '\n'
	
	export='prime'
	while [ x$export != x ]; do
	    printf 'Enter another path to export, or press return to move on: '
	    read export
	    
	    # Add to NFS exports if not already there
	    auto-append-line "$export" \
		"$export $range(rw,no_root_squash)" \
		/etc/exports $0
	done
	    
	service rpcbind restart
	service nfslock restart
	service nfs restart
    
	# Signal NFS daemon to update exports
	# Unnecessary after restarting daemons?
	# exportfs -a
	;;
    esac
    
    printf "Currently configured mounts:\n\n"
    awk '$3 == "nfs" { print $0 }' /etc/fstab
    
    case $NODE_TYPE in
    'compute'|'io')
	# Compute nodes
	script=/usr/local/cluster/add-shares
	if [ -e $script ]; then
	    printf "Automatically configuring shares with $script...\n"
	    sh $script || true
	else
	    nfs_server='prime'
	    while [ x$nfs_server != x ]; do
		printf 'Enter an NFS server to mount from, or press return to move on: '
		read nfs_server
		
		if [ 0$nfs_server != 0 ]; then
		    printf "Exported directory to mount? "
		    read export
		    # Add to fstab if not already there
		    auto-append-line "$export$num" \
			"${nfs_server}:$export\t$export\tnfs\trw,intr\t0\t0" \
			/etc/fstab nocomment
		    mkdir -p $export
		fi
	    done
	fi
	
	service rpcbind restart
	service nfslock restart
	service nfs restart
    
	# mount and test
	mount -a
	df
    esac
}


##########################################################################
#   Function description:
#       
#   Arguments:
#       
#   Returns:
#       
#   History:
#   Date        Name        Modification
#   2013-12-10  bacon        Begin
##########################################################################

install_core_rpms()
{
    line
    printf "Installing man pages...\n"
    yum install -y man man-pages
    
    printf "Installing core utilities...\n"
    yum install -y \
	rsync \
	wget \
	nano \
	sysstat \
	bind-utils \
	dash ksh tcsh zsh \
	finger \
	bc \
	mailx \
	parted \
	lsof \
	emacs \
	words \
	environment-modules \
	yum-utils \
	dmidecode
    # No such package yum install -y impitool     # Remote management and LOM
    
    if [ $NODE_TYPE = compute ]; then
	yum install -y openmpi-devel numactl numactl-devel
    fi

    # Install compilers, etc.
    line
    printf "Installing base development tools...\n"
    # gcc-* and cvs required for pkgsrc
    yum install -y gcc gcc-c++ gcc-gfortran cvs subversion

    # Enable X11 apps without installing a desktop system like KDE
    line
    printf "Enabling X11 apps without installing desktop...\n"
    yum install -y xauth
}


##########################################################################
#   Function description:
#       
#   Arguments:
#       
#   Returns:
#       
#   History:
#   Date        Name        Modification
#   2013-12-10  bacon        Begin
##########################################################################

ssh_config()
{
    # Enable incoming ssh
    line
    printf 'Configuring sshd...\n'
    chkconfig sshd on
    service sshd restart
    
    # Enable passwordless ssh so we can distribute hosts entries below
    if [ ! -e /root/.ssh/id_rsa ]; then
	printf "Setting up public key...\n"
	ssh-keygen -f /root/.ssh/id_rsa -N ""
    else
	printf "id_rsa already exists.\n"
    fi

    if [ $NODE_TYPE = 'head' ]; then
	cat << EOM > /etc/profile.d/ssh-keygen.sh
# Generated by cluster-setup
if [ ! -f ~/.ssh/id_rsa ]; then
    ssh-keygen -f ~/.ssh/id_rsa -N ""
    cat ~/.ssh/id_rsa.pub > ~/.ssh/authorized_keys
    chmod 600 ~/.ssh/authorized_keys
fi
EOM

	cat << EOM > /etc/profile.d/ssh-keygen.csh
# Generated by cluster-setup
if ( ! -f ~/.ssh/id_rsa ) then
    ssh-keygen -f ~/.ssh/id_rsa -N ""
    cat ~/.ssh/id_rsa.pub > ~/.ssh/authorized_keys
    chmod 600 ~/.ssh/authorized_keys
endif
EOM
	chmod 755 /etc/profile.d/ssh-keygen.*sh
    fi
    
    # FIXME: Set PermitRootLogin to without-password on nodes with a public
    # interface.
}


##########################################################################
#   Function description:
#       
#   Arguments:
#       
#   Returns:
#       
#   History:
#   Date        Name        Modification
#   2013-12-11  bacon        Begin
##########################################################################

ldap_config()
{
    # Enable ldap authentication for ssh.  OS and dist dependent!
    # Add to auto-admin Linux tools
    # http://www.centos.org/docs/5/html/Deployment_Guide-en-US/s1-ldap-pam.html

    # Redhat/CentOS
    yum install -y openldap-clients.x86_64

    # Edit /etc/ldap.conf, /etc/openldap/ldap.conf, etc.
    ldap=`auto-ask ldap 'Enable LDAP authentication?' y`
    if [ $ldap = 'y' ]; then
	server=`auto-ask ldap-server 'LDAP server?' ldap://ldap.my.domain`
	ou=`auto-ask ldap-ou 'Organization info?' ou=people,o=my.domain`
	cert_file=`auto-ask cert 'Name of CERT file?' ./cacert.crt`
	auto-ldap-client-setup $server $ou $cert_file
    fi
}


##########################################################################
#   Function description:
#       
#   Arguments:
#       
#   Returns:
#       
#   History:
#   Date        Name        Modification
#   2014-05-02  bacon        Begin
##########################################################################

cluster_startup_scripts()
{
    # Bourne shell
    cat << EOM > /etc/profile.d/cluster.sh
first_two=\$(hostname|awk -F '.' ' { printf("%s.%s",\$1,\$2); }')
PS1="[\u@\$first_two \W] \\!: "
alias f=finger
alias dir='ls -als'
EOM
    
    # C shell
    cat << EOM > /etc/profile.d/cluster.csh
set first_two=\`hostname|awk -F '.' ' { printf("%s.%s",\$1,\$2); }'\`
set prompt="[%n@\$first_two %c] %h: "
alias f finger
alias dir 'ls -als'
EOM
}


##########################################################################
#   Function description:
#       
#   Arguments:
#       
#   Returns:
#       
#   History:
#   Date        Name        Modification
#   2014-05-02  bacon        Begin
##########################################################################

apache_install()
{
    if [ $# != 2 ]; then
	printf "Usage: apache_install pkgsrc-prefix\n"
	exit 1
    fi
    
    local pkgsrc_prefix=$1
    local pkgsrc_suffix=$2

    pkgsrc_install_packages $pkgsrc_prefix "$pkgsrc_suffix" www/apache24
    
    # FIXME: Install proper init script
}


##########################################################################
#   Function description:
#       
#   Arguments:
#       
#   Returns:
#       
#   History:
#   Date        Name        Modification
#   2014-05-02  root        Begin
##########################################################################

slurm_install()
{
    if [ $# != 2 ]; then
	printf "Usage: slurm_install pkgsrc-prefix pkgsrc-suffix\n"
	exit 1
    fi
    
    local pkgsrc_prefix=$1
    local pkgsrc_suffix=$2
    
    case $NODE_TYPE in
    'head'|'compute')
	if ! pkg_info -e slurm; then
	    pkgsrc_install_packages $pkgsrc_prefix "$pkgsrc_suffix" wip/slurm
	else
	    if ! fgrep slurm /etc/passwd; then
		printf "Run node-sync-user `hostname` slurm from the head node\n"
		pause
	    fi
	fi
	cluster-munge-enable $NODE_TYPE
	cluster-slurm-enable
	;;
    'io')
	;;
    esac
}


##########################################################################
#   Function description:
#       
#   Arguments:
#       
#   Returns:
#       
#   History:
#   Date        Name        Modification
#   2014-05-02  root        Begin
##########################################################################

ganglia_install()
{
    if [ $# != 2 ]; then
	printf "Usage: ganglia_install pkgsrc-prefix pkgsrc-suffix\n"
	exit 1
    fi
    local pkgsrc_prefix=$1
    local pkgsrc_suffix=$2
    
    # Redundant check due to name diff between pkg and port
    if ! pkg_info ganglia-monitor-core > /dev/null; then
	pkgsrc_install_packages $pkgsrc_prefix "$pkgsrc_suffix" \
	    wip/ganglia-monitor-core
    fi

    # Required for "service gmond"
    ln -sf $pkgsrc_prefix/pkg${pkgsrc_suffix}/share/examples/ganglia-monitor-core/gmond.init.linux \
	/etc/init.d/gmond
    chkconfig --add gmond
    chkconfig gmond on
    service gmond restart
    
    if [ $NODE_TYPE = head ]; then
	pkgsrc_install_packages $pkgsrc_prefix "$pkgsrc_suffix" wip/ganglia-web
	ganglia-web-setup
    fi
}


##########################################################################
#   Function description:
#       
#   Arguments:
#       
#   Returns:
#       
#   History:
#   Date        Name        Modification
#   2014-05-02  root        Begin
##########################################################################

disable_overcommit()
{
    # Tighten memory allocation to prevent overcommits from crashing nodes
    # Memory limits are controlled primarily by the scheduler, but
    # this is done on a sampling basis and overcommits could happen
    # between samples.
    # vm.memory_overcommit
    #   0 = Default: Heuristic, overcommit_ration, and OOM killer
    #   1 = Unlimited overcommit (all mallocs succeed)
    #   2 = No overcommit.  Configure enough swap to allow some slack.
    auto-append-line 'vm.overcommit_memory = 2' /etc/sysctl.conf $0
    sysctl vm.overcommit_memory='2'
    auto-append-line 'vm.overcommit_ratio = 100' /etc/sysctl.conf $0
    sysctl vm.overcommit_ratio='100'
}


##########################################################################
#   Function description:
#       
#   Arguments:
#       
#   Returns:
#       
#   History:
#   Date        Name        Modification
#   2014-11-14  root        Begin
##########################################################################

authorize_ssh()
{
    # Authorize ssh to and from head nodes
    line
    cat << EOM
    
You may now specify other hosts in the cluster to and from which
$(hostname) should not require a password for ssh.
    
EOM
    
    ssh_host='x'
    while [ 0$ssh_host != 0 ]; do
	printf "Hostname or IP of node? [Just press return if there are no more] "
	read ssh_host
	if [ 0$ssh_host != 0 ]; then
	    printf "Make sure $ssh_host has PermitRootLogin=yes.\n"
	    pause
	    auto-ssh-authorize $ssh_host
	    ssh -t $ssh_host auto-ssh-authorize `hostname`
	fi
    done
}


##########################################################################
#   Function description:
#       
#   Arguments:
#       
#   Returns:
#       
#   History:
#   Date        Name        Modification
#   2016-08-15  root        Begin
##########################################################################

iptables_config()
{
    if ! iptables-save | grep -- "-j CLUSTER"; then
	iptables -N CLUSTER
	iptables -I INPUT $INSERTLN -j CLUSTER
	iptables -I CLUSTER -p udp -s 192.168.0.0/22 -j ACCEPT
	iptables -I CLUSTER -p tcp -s 192.168.0.0/22 -j ACCEPT
	/etc/init.d/iptables save
    fi
}


##########################################################################
#   Main
##########################################################################

# Quit on first error
set -e

if [ `whoami` != root ]; then
    printf "$0 must be run by root.\n"
    exit 1
fi

if [ $# != 1 ]; then
    usage $0
fi

# Caution: 
# The line below is modified by install.sh. Be careful not to replace
# %%PREFIX%% with a hard-coded prefix from an installed script.
prefix=%%PREFIX%%

NODE_TYPE=$1
case $NODE_TYPE in
'head'|'compute'|'io')
    ;;
*)
    usage $0
    ;;
esac

if [ -e /root/Save/anaconda-ks.cfg ]; then
    printf "Node already configured.  Reconfigure? [n] "
    read reconfig
    if [ 0$reconfig != 0y ]; then
	exit 0
    fi
fi

for file in /root/.ssh /etc/fstab; do
    if [ ! -e $file.backup ]; then
	printf 'Backing up $file...\n'
	cp -R $file $file.backup
    fi
done

if [ $NODE_TYPE != head ]; then
    cat << EOM

1)  Make sure /etc/hosts is up-to-date on all nodes.
2)  Run cluster-sync-pkgsrc on the head node if `hostname` is out of date.
    This is done automatically by cluster-init-node.

EOM
    pause
fi

# Save downloaded RPMs
sed -i 's|keepcache=0|keepcache=1|' /etc/yum.conf

START_DIR=`pwd`
export PATH=${PATH}:$START_DIR

#########################################
# Basic tasks that do not require pkgsrc

cluster_startup_scripts
boot_block_backup
ntp_config
install_core_rpms
auto-enable-passwdqc

# Configure firewall
iptables_config

# After core_rpms.  Requires gcc.
printf "Run harden script? y/[n] "
read harden
if [ 0$harden = 0y ]; then
    auto-harden
fi

ib=`auto-ask ib-config 'Configure Infiniband?' y`
if [ $ib = y ]; then
    ib_config
fi

nfs_config
ssh_config

###################################################################
# Install user software independent of RPMS so that it will not be
# broken by yum updates.

# Pkgsrc base
pkgsrc_prefix='/usr'
cat << EOM

You may add a suffix on your local pkgsrc installation, such as -2016Q1.
You *MUST* choose the same suffix when doing the pkgsrc installation.

EOM
printf "Suffix on $pkgsrc_prefix/pkg[src]: [none] "
read pkgsrc_suffix

pkgsrc_setup $pkgsrc_prefix "$pkgsrc_suffix"
pkgsrc_append_default_path $pkgsrc_prefix "$pkgsrc_suffix"

# Common packages
if [ $NODE_TYPE = head ]; then
    for pkg in wip/auto-admin net/iperf; do
	pkgsrc_install_packages $pkgsrc_prefix "$pkgsrc_suffix" $pkg
    done
fi

# Requires auto-admin: Do after pkgsrc_setup
disable_overcommit

ganglia_install $pkgsrc_prefix "$pkgsrc_suffix"

case $NODE_TYPE in
'head')
    # Allow root ssh or other remote execution only with keys
    # On by default in CentOS
    
    # Set up cluster-run env to allow running a command on all nodes
    # ( Initially for updating /etc/hosts )

    # Enable authentication via outside LDAP server
    # ldap_config

    # Set per-process memory limits to a fraction of RAM
    auto-set-memory-limits 16777216
    auto-set-umask 027
    
    kickstart=`auto-ask pxe-server 'Enable PXE installation server?' y`
    if [ $kickstart = 'y' ]; then
	iso_path=`auto-ask pxe-iso-path 'Full pathname of ISO image? ' ''`
	auto-pxe-installer-setup $iso_path
    fi
    ;;

'compute')    # Compute nodes
    # Do this in cluster-init-node authorize_ssh
    cluster-set-compute-memory-limits
    
    # Set default OMP threads to 1 for all jobs
    ;;

'io')
    # Do this in cluster-init-node authorize_ssh
    ;;

esac

# Do this LAST to ensure node is fully operational before going live
case $NODE_TYPE in
'head'|'compute')
    slurm_install $pkgsrc_prefix "$pkgsrc_suffix"
    ;;
*)
    ;;
esac

# Save Kickstart file
mkdir -p /root/Save
backup_file ~/anaconda-ks.cfg /root/Save

if ! fgrep -q clusteradmin /etc/passwd; then
    cluster-adduser cluster-admin
fi

printf 'Reboot? [y]/n '
read reboot
if [ 0$reboot != 0n ]; then
    shutdown -r now
fi

