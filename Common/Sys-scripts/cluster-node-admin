#!/bin/sh -e

##########################################################################
#   Script description:
#       Submenu for node management tasks
#       
#   History:
#   Date        Name        Modification
#   2015-12-19  J Bacon     Begin
##########################################################################

usage()
{
    printf "Usage: $0 \n"
    exit 1
}


##########################################################################
#   Function description:
#       Pause until user presses return
##########################################################################

pause()
{
    local junk
    
    read -p "Press return to continue..." junk
}


##########################################################################
#   Function description:
#       
#   Arguments:
#       
#   Returns:
#       
#   History:
#   Date        Name        Modification
#   2015-12-23  root        Begin
##########################################################################

get_host_info()
{
    default_digits=$1
    read -p "Digits in hostname #? [$default_digits] " host_digits
    if [ 0$host_digits = 0 ]; then
	host_digits=$default_digits
    fi
    
    # Remove leading zeros so printf doesn't interpret it as octal
    read -p "First host number? " first_num
    first_num=`echo $first_num | sed -E 's|^0+||'`
    read -p "Last host number? " last_num
    last_num=`echo $last_num | sed -E 's|^0+||'`
    return 0
}


##########################################################################
#   Function description:
#       
#   Arguments:
#       
#   Returns:
#       
#   History:
#   Date        Name        Modification
#   2016-10-27  root        Begin
##########################################################################

update_warning()
{
    cat << EOM

================================ WARNING ===================================

Rebooting the login node while slurm-update-idle-nodes is running may leave
a compute node partially updated and orphan

    $updates_dir/lockfile

It is best to update and reboot the login node before running
slurm-update-idle-nodes unless you really know what you are doing.

If you have already started updating idle compute nodes, it would be best
to allow the updates to finish before updating the login node.

============================================================================
EOM
    pause
}


##########################################################################
#   Main
##########################################################################

if [ $# != 0 ]; then
    usage
fi

updates_dir="/home/slurm/Compute-node-updates"
for prefix in /usr/local /usr/pkg; do
    if [ -e $prefix/etc/slurm.conf ]; then
	default_domain=`awk -F = '$1 == "ClusterName" { print $2 }' $prefix/etc/slurm.conf`
    fi
done

while true; do

    clear
    cat << EOM
    
			    **************************
				  Node Admin Menu
			    **************************

1.. PXE install new nodes
2.. Initialize new nodes
3.. Synchronize an I/O node
4.. Synchronize compute nodes
5.. Install updates on backup login node
6.. Verify scheduler restart on backup login node
7.. Install updates on login node
8.. Install updates on visualization nodes
9.. Install updates on I/O nodes
10. Install updates on idle compute nodes
11. Restart cron updates on idle compute nodes
12. Drain all nodes
13. Shut down idle nodes
14. Distribute system files
Q.. Quit

EOM

    read -p "Selection? " selection
    clear
    case $selection in
    
    1)  # PXE
	read -p "Host name prefix? [compute-] " host_prefix
	if [ 0$host_prefix = 0 ]; then
	    host_prefix='compute-'
	fi
	read -p "Digits in hostname #? [3] " host_digits
	if [ 0$host_digits = 0 ]; then
	    host_digits=3
	fi
	read -p "Domain? [$default_name] " domain
	if [ 0$domain = 0 ]; then
	    domain='$default_name'
	fi
	auto-pxe-node-discover $host_prefix $host_digits $domain
	;;
    
    2)  # Initialize
	node_type=none
	while [ $node_type = none ]; do
	    cat << EOM

1.. Backup login nodes
2.. I/O nodes
3.. Compute nodes
4.. Visualization nodes

EOM
	    read node_type
	    case $node_type in
	    1)
		node_type=backup
		default_digits=1
		default_prefix=login-
		;;
	    2)
		node_type=io
		default_digits=2
		default_prefix=raid-
		;;
	    3)
		node_type=compute
		default_digits=3
		default_prefix=compute-
		;;
	    4)
		node_type=vis
		default_digits=1
		default_prefix=vis-
		;;
	    *)
		printf "Invalid selection.\n"
		pause
	    esac
	done
	read -p "Host name prefix? [$default_prefix] " host_prefix
	if [ 0$host_prefix = 0 ]; then
	    host_prefix=$default_prefix
	fi
	read -p "Domain? [$default_domain] " domain
	if [ 0$domain = 0 ]; then
	    domain=$default_domain
	fi
	get_host_info $default_digits
	read -p "Unattended init? y/[n] " unattended
	if [ 0$unattended = 0y ]; then
	    flags=--unattended
	fi
	num=$first_num
	while [ $num -le $last_num ]; do
	    node=`printf '%s%0*d.%s' $host_prefix $host_digits $num $domain`
	    cluster-init-node $flags $node $node_type || true
	    printf "Done with $node...\n"
	    num=$((num + 1))
	done
	;;
    
    3)  # Sync I/O nodes
	read -p"Fully qualified host name? " node
	if [ 0$node != 0 ]; then
	    read -p "Default responses to all prompts? y/[n] " use_defaults
	    if [ 0$use_defaults = 0y ]; then
		read -p "Reference node for binary packages? " ref_node
		sync_opts="--use-defaults $ref_node"
	    fi
	    printf "Synchronizing $node...\n"
	    cluster-sync-node $sync_opts $node io || true
	    printf "Done with $node...\n"
	fi
	;;
    
    4)  # Sync compute nodes
	sinfo
	read -p "Host name prefix? [compute-] " host_prefix
	if [ 0$host_prefix = 0 ]; then
	    host_prefix='compute-'
	fi
	read -p "Domain? [$default_domain] " domain
	if [ 0$domain = 0 ]; then
	    domain=$default_domain
	fi
	get_host_info 3
	read -p "Default responses to all prompts? y/[n] " use_defaults
	if [ 0$use_defaults = 0y ]; then
	    read -p "Reference node for binary packages? " ref_node
	    sync_opts="--use-defaults $ref_node"
	    read -p "Automatically configure infiniband on all nodes? y/[n] " infiniband
	    if [ 0$infiniband = 0y ]; then
		sync_opts="$sync_opts --infiniband"
	    fi
	fi
	num=$first_num
	while [ $num -le $last_num ]; do
	    node=`printf '%s%0*d.%s' $host_prefix $host_digits $num $domain`
	    printf "Synchronizing $node...\n"
	    cluster-sync-node $sync_opts $node compute || true
	    printf "Done with $node...\n"
	    num=$((num + 1))
	done
	;;
    
    5)  # Update backup login node
	cluster-update-backup-nodes || true
	
	cat << EOM
	
Verify that the backup login node is rebooted and fully functional before
updating the primary login node.

EOM
	pause
	;;
    
    6)  # Verify scheduler running on backup login node
	ssh login-2 tail /var/log/slurm/slurmctld.log || true
	;;
    
    7)  # Update login node
	update_warning
	w
	read -p 'Continue? y/[n] ' continue
	if [ 0$continue = 0y ]; then
		cat << EOM | wall

The login node may need to be rebooted shortly to complete the installation of
important security updates.  An additional notice will follow if a reboot
is necessary.

EOM
	    auto-update-system --binary
	    if [ `auto-ostype` = FreeBSD ]; then
		read -p "Update and sync ports tree to all nodes? [y]/n " portsnap
		if [ 0$portsnap != 0n ]; then
		    cluster-portsnap
		    if [ -e /usr/local/sbin/wip-update ]; then
			cluster-wip-update
		    fi
		fi
	    fi
	    w
	    read -p "Reboot? [y]/n " reboot
	    if [ 0$reboot != 0n ]; then
		read -p "Minutes before reboot? [2] " minutes
		if [ 0$minutes = 0 ]; then
		    minutes=2
		fi
		cat << EOM | wall

The login node will be rebooted shortly to complete the installation of
important security updates.  It should be available again in a few minutes.

EOM
		shutdown -r +$minutes
	    fi
	fi
	;;
    
    8)
	cluster-update-vis-nodes || true
	;;
    
    9)
	cluster-update-io-nodes || true
	;;
    
    10) # Update all compute nodes
	update_warning
	cat << EOM

You can update all compute nodes, or just those that have not received the
last round of updates.

EOM
	mkdir -p $updates_dir
	read -p "Update all compute nodes? y/[n] " update_all
	if [ 0$update_all = 0y ]; then
	    rm -f $updates_dir/updated-nodes
	fi
	slurm-update-idle-nodes $updates_dir
	;;
    
    11) # Schedule compute node updates in cron
	clear
	update_warning
	cat << EOM

This will clear the updated-nodes list from the last round of cron updates.

All compute nodes will be immediately set to draining state to prevent them
from receiving any new jobs before they are updated.

Nodes will be updated one at a time shortly after they become idle.

Note: cron must be configured with an entry like the following:

    0-59/15 * * * * slurm-update-idle-nodes --yes \\
	    >> /var/log/compute-node-updates 2>&1

slurm-update-idle-nodes and scripts it depends on must be in PATH.

EOM
	read -p "Proceed? y/[n] " proceed
	if [ 0"$proceed" = 0y ]; then
	    rm -f $updates_dir/updated-nodes $updates_dir/updates.log
	fi
	;;

    12) # Drain all nodes
	read -p "Reason for draining all nodes? " reason
	all_nodes=`sinfo -ho '%N'`
	scontrol update state=drain nodename="$all_nodes" reason="$reason"
	sinfo
	;;

    13)
	slurm-shutdown-idle-nodes
	;;

    14) # Synchronize system files
	cat << EOM

This will distribute common system files such as

    /etc/hosts
    /etc/ssh/ssh_config
    Local plugins for cluster-adduser
    
EOM
	read -p "Proceed? y/[n] " proceed
	if [ 0"$proceed" = 0y ]; then
	    cluster-sync-sysfiles
	fi
	;;
    
    Q|q)
	exit 0
	;;
    
    *)
	printf "Invalid selection: '$selection'\n"
	;;
    esac
    pause
done

