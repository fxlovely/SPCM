#!/bin/sh -e

##########################################################################
#   Script description:
#       
#   Arguments:
#       
#   Returns:
#       
#   History:
#   Date        Name        Modification
#   2015-12-19  root        Begin
##########################################################################

usage()
{
    printf "Usage: $0 \n"
    exit 1
}


##########################################################################
#   Function description:
#       Pause until user presses return
##########################################################################

pause()
{
    local junk
    
    printf "Press return to continue..."
    read junk
}


##########################################################################
#   Function description:
#       
#   Arguments:
#       
#   Returns:
#       
#   History:
#   Date        Name        Modification
#   2015-12-23  root        Begin
##########################################################################

get_host_info()
{
    printf "Digits in hostname #? [3] "
    read host_digits
    if [ 0$host_digits = 0 ]; then
	host_digits=3
    fi
    
    # Remove leading zeros so printf doesn't interpret it as octal
    printf "First host number? "
    read first_num
    first_num=`echo $first_num | sed -E 's|^0+||'`
    printf "Last host number? "
    read last_num
    last_num=`echo $last_num | sed -E 's|^0+||'`
    return 0
}


##########################################################################
#   Function description:
#       
#   Arguments:
#       
#   Returns:
#       
#   History:
#   Date        Name        Modification
#   2016-10-27  root        Begin
##########################################################################

update_warning()
{
    cat << EOM

================================ WARNING ===================================

Rebooting the login node while slurm-update-idle-nodes is running may leave
a compute node partially updated and orphan

    $updates_dir/lockfile

It is best to update and reboot the login node before running
slurm-update-idle-nodes unless you really know what you are doing.

If you have already started updating idle compute nodes, it would be best
to allow the updates to finish before updating the login node.

============================================================================
EOM
    pause
}


##########################################################################
#   Main
##########################################################################

if [ $# != 0 ]; then
    usage
fi

updates_dir="/home/slurm/Compute-node-updates"

while true; do

    clear
    cat << EOM
    
			    **************************
				  Node Admin Menu
			    **************************

1.. PXE install new nodes
2.. Initialize new nodes
3.. Synchronize compute nodes
4.. Synchronize an I/O node
5.. Install updates on backup login node
6.. Verify scheduler restart on backup login node
7.. Install updates on login node
8.. Install updates on visualization nodes
9.. Install updates on I/O nodes
10. Install updates on idle compute nodes
11. Restart cron updates on idle compute nodes
12. Drain all nodes
13. Shut down idle nodes
14. Distribute system files
Q.. Quit

EOM

    printf "Selection? "
    read selection
    clear
    case $selection in
    1)
	printf "Host name prefix? [compute-] "
	read host_prefix
	if [ 0$host_prefix = 0 ]; then
	    host_prefix='compute-'
	fi
	printf "Digits in hostname #? [3] "
	read host_digits
	if [ 0$host_digits = 0 ]; then
	    host_digits=3
	fi
	printf "Domain? [local] "
	read domain
	if [ 0$domain = 0 ]; then
	    domain='local'
	fi
	auto-pxe-node-discover $host_prefix $host_digits $domain
	;;
    2)
	printf "Host name prefix? [compute-] "
	read host_prefix
	if [ 0$host_prefix = 0 ]; then
	    host_prefix='compute-'
	fi
	printf "Domain? [local] "
	read domain
	if [ 0$domain = 0 ]; then
	    domain='local'
	fi
	node_type=none
	while [ $node_type = none ]; do
	    cat << EOM

1.. Backup login nodes
2.. Compute nodes
3.. I/O nodes
4.. Visualization nodes

EOM
	    read node_type
	    case $node_type in
	    1)
		node_type=backup
		;;
	    2)
		node_type=compute
		;;
	    3)
		node_type=io
		;;
	    4)
		node_type=vis
		;;
	    *)
		printf "Invalid selection.\n"
		pause
	    esac
	done
	get_host_info
	num=$first_num
	while [ $num -le $last_num ]; do
	    node=`printf '%s%0*d.%s' $host_prefix $host_digits $num $domain`
	    printf "Initializing $node.  Are you sure? y/[n] "
	    read sure
	    if [ 0$sure = 0y ]; then
		cluster-init-node $node $node_type
	    fi
	    printf "Done with $node...\n"
	    num=$((num + 1))
	done
	;;
    3)
	# FIXME: Support other schedulers
	sinfo
	printf "Host name prefix? [compute-] "
	read host_prefix
	if [ 0$host_prefix = 0 ]; then
	    host_prefix='compute-'
	fi
	printf "Domain? [local] "
	read domain
	if [ 0$domain = 0 ]; then
	    domain='local'
	fi
	get_host_info
	printf "Answer yes to all prompts? y/[n] "
	read use_defaults
	num=$first_num
	while [ $num -le $last_num ]; do
	    node=`printf '%s%0*d.%s' $host_prefix $host_digits $num $domain`
	    printf "Synchronizing $node...\n"
	    if [ 0$use_defaults = 0y ]; then
		yes '' | cluster-sync-node $node compute
	    else
		cluster-sync-node $node compute
	    fi
	    printf "Done with $node...\n"
	    num=$((num + 1))
	done
	;;
    4)
	printf "Full qualified host name? "
	read node
	printf "Use all default settings? y/[n] "
	read use_defaults
	printf "Synchronizing $node...\n"
	if [ 0$use_defaults = 0y ]; then
	    yes '' | cluster-sync-node $node io
	else
	    cluster-sync-node $node io
	fi
	printf "Done with $node...\n"
	;;
    5)
	cluster-update-backup-nodes
	
	cat << EOM
	
Verify that the backup login node is rebooted and fully functional before
updating the primary login node.

EOM
	pause
	;;
    6)
	ssh login-2 tail /var/log/slurm/slurmctld || true
	;;
    7)
	update_warning
	w
	printf 'Continue? y/[n] '
	read continue
	if [ 0$continue = 0y ]; then
		cat << EOM | wall

The login node may need to be rebooted shortly to complete the installation of
important security updates.  An additional notice will follow if a reboot
is necessary.

EOM
	    auto-update-system --binary
	    if [ `auto-ostype` = FreeBSD ]; then
		printf "Update and sync ports tree to all nodes? [y]/n "
		read portsnap
		if [ 0$portsnap != 0n ]; then
		    cluster-portsnap
		    if [ -e /usr/local/sbin/wip-update ]; then
			cluster-wip-update
		    fi
		fi
	    fi
	    w
	    printf "Reboot? [y]/n "
	    read reboot
	    if [ 0$reboot != 0n ]; then
		printf "Minutes before reboot? [2] "
		read minutes
		if [ 0$minutes = 0 ]; then
		    minutes=2
		fi
		cat << EOM | wall

The login node will be rebooted shortly to complete the installation of
important security updates.  It should be available again in a few minutes.

EOM
		shutdown -r +$minutes
	    fi
	fi
	;;
    8)
	cluster-update-vis-nodes
	;;
    9)
	cluster-update-io-nodes
	;;
    10)
	update_warning
	cat << EOM

You can update all compute nodes, or just those that have not received the
last round of updates.

EOM
	mkdir -p $updates_dir
	printf "Update all compute nodes? y/[n] "
	read update_all
	if [ 0$update_all = 0y ]; then
	    rm -f $updates_dir/updated-nodes
	fi
	slurm-update-idle-nodes $updates_dir
	;;
    11)
	clear
	update_warning
	cat << EOM

This will clear the updated-nodes list from the last round of cron updates.

All compute nodes will be immediately set to draining state to prevent them
from receiving any new jobs before they are updated.

Nodes will be updated one at a time shortly after they become idle.

Note: cron must be configured with an entry like the following:

    0-59/15 * * * * slurm-update-idle-nodes --yes \\
	    >> /var/log/compute-node-updates 2>&1

slurm-update-idle-nodes and scripts it depends on must be in PATH.

EOM
	printf "Proceed? y/[n] "
	read proceed
	if [ 0"$proceed" = 0y ]; then
	    rm -f $updates_dir/updated-nodes $updates_dir/updates.log
	fi
	;;

    12)
	printf "Reason for draining all nodes? "
	read reason
	all_nodes=`sinfo -ho '%N'`
	scontrol update state=drain nodename="$all_nodes" reason="$reason"
	sinfo
	;;

    13)
	slurm-shutdown-idle-nodes
	;;

    14)
	cat << EOM

This will distribute common system files such as

    /etc/hosts
    /etc/ssh/ssh_config
    Local plugins for cluster-adduser
    
EOM
	printf "Proceed? y/[n] "
	read proceed
	if [ 0"$proceed" = 0y ]; then
	    cluster-sync-sysfiles
	fi
	;;
    Q|q)
	exit 0
	;;
    *)
	printf "Invalid selection: '$selection'\n"
	;;
    esac
    pause
done

