#!/bin/sh -e

##########################################################################
#   Script description:
#       
#   Arguments:
#       
#   Returns:
#       
#   History:
#   Date        Name        Modification
#   2015-12-19  root        Begin
##########################################################################

usage()
{
    printf "Usage: $0 \n"
    exit 1
}


##########################################################################
#   Function description:
#       Pause until user presses return
##########################################################################

pause()
{
    local junk
    
    printf "Press return to continue..."
    read junk
}


##########################################################################
#   Function description:
#       
#   Arguments:
#       
#   Returns:
#       
#   History:
#   Date        Name        Modification
#   2015-12-23  root        Begin
##########################################################################

get_host_info()
{
    printf "Digits in hostname #? [3] "
    read host_digits
    if [ 0$host_digits = 0 ]; then
	host_digits=3
    fi
    printf "First host number? "
    read first_num
    printf "Last host number? "
    read last_num
    return 0
}

##########################################################################
#   Main
##########################################################################

if [ $# != 0 ]; then
    usage
fi

while true; do

    clear
    cat << EOM
    
			    **************************
				Cluster Admin Menu
			    **************************

1.. PXE install new nodes
2.. Initialize newly installed nodes
3.. Synchronize compute nodes
4.. Synchronize an I/O node
5.. Install updates on login node
6.. Install updaets on I/O nodes
7.. Install updates on idle compute nodes
Q.. Quit

EOM

    printf "Selection? "
    read selection
    clear
    case $selection in
    1)
	printf "Host name prefix? [compute-] "
	read host_prefix
	if [ 0$host_prefix = 0 ]; then
	    host_prefix='compute-'
	fi
	printf "Digits in hostname #? [3] "
	read host_digits
	if [ 0$host_digits = 0 ]; then
	    host_digits=3
	fi
	printf "Domain? [local] "
	read domain
	if [ 0$domain = 0 ]; then
	    domain='local'
	fi
	auto-pxe-node-discover $host_prefix $host_digits $domain
	pause
	;;
    2)
	printf "Host name prefix? [compute-] "
	read host_prefix
	if [ 0$host_prefix = 0 ]; then
	    host_prefix='compute-'
	fi
	get_host_info
	num=$first_num
	while [ $num -le $last_num ]; do
	    node=`printf '%s%0*d' $host_prefix $host_digits $num`
	    printf "Initializing $node...\n"
	    yes | cluster-init-node $node 2>&1 | tee init-$node.log
	    printf "Done with $node...\n"
	    num=$((num + 1))
	done
	;;
    3)
	# FIXME: Support other schedulers
	sinfo
	get_host_info
	printf "Use all default settings? y/[n] "
	read use_defaults
	num=$first_num
	while [ $num -le $last_num ]; do
	    node=`printf '%s%0*d' compute- $host_digits $num`
	    printf "Synchronizing $node...\n"
	    if [ 0$use_defaults = 0y ]; then
		yes '' | cluster-sync-node $node compute
	    else
		cluster-sync-node $node compute
	    fi
	    printf "Done with $node...\n"
	    num=$((num + 1))
	done
	;;
    4)
	printf "Node name or IP? "
	read node
	printf "Use all default settings? y/[n] "
	read use_defaults
	printf "Synchronizing $node...\n"
	if [ 0$use_defaults = 0y ]; then
	    yes '' | cluster-sync-node $node io
	else
	    cluster-sync-node $node io
	fi
	printf "Done with $node...\n"
	pause
	;;
    5)
	if [ `auto-ostype` = FreeBSD ]; then
	    printf "Update and sync ports tree to all nodes? y/[n] "
	    read portsnap
	    if [ 0$portsnap = 0y ]; then
		cluster-portsnap
	    fi
	fi
	auto-update-system
	;;
    6)
	cluster-update-io-nodes
	;;
    7)
	cat << EOM

You can update all compute nodes, or just those that have not received the
last round of updates.

EOM
	dir="/home/slurm/Compute-node-updates"
	mkdir -p $dir
	printf "Update all compute nodes? y/[n] "
	read update_all
	if [ 0$update_all = 0y ]; then
	    rm -f $dir/updated-nodes
	fi
	slurm-update-idle-nodes $dir
	;;
    Q|q)
	exit 0
	;;
    *)
	printf "Invalid selection: '$selection'\n"
	;;
    esac
    pause
done

