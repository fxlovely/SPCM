#!/bin/sh -e

##########################################################################
#   Script description:
#       Submenu for node management tasks
#       
#   History:
#   Date        Name        Modification
#   2015-12-19  J Bacon     Begin
##########################################################################

usage()
{
    printf "Usage: $0 \n"
    exit 1
}


##########################################################################
#   Function description:
#       Pause until user presses return
##########################################################################

pause()
{
    local junk
    
    read -p "Press return to continue..." junk
}


##########################################################################
#   Function description:
#       Collect info on hosts to be managed
#       
#   History:
#   Date        Name        Modification
#   2015-12-23  J Bacon     Begin
##########################################################################

get_host_info()
{
    default_digits=$1
    read -p "Digits in hostname #? [$default_digits] " host_digits
    if [ 0$host_digits = 0 ]; then
	host_digits=$default_digits
    fi
    
    # Remove leading zeros so printf doesn't interpret it as octal
    read -p "First host number? " first_num
    if [ 0$first_num = 0 ]; then
	return 1
    fi
    first_num=`echo $first_num | sed -E 's|^0+||'`
    read -p "Last host number? " last_num
    if [ 0$last_num = 0 ]; then
	return 1
    fi
    last_num=`echo $last_num | sed -E 's|^0+||'`
    return 0
}


##########################################################################
#   Function description:
#       
#   Arguments:
#       
#   Returns:
#       
#   History:
#   Date        Name        Modification
#   2016-10-27  root        Begin
##########################################################################

update_warning()
{
    cat << EOM

================================ WARNING ===================================

Rebooting the head node while slurm-update-idle-nodes is running may leave
a compute node partially updated and orphan

    $updates_dir/lockfile

It is best to update and reboot the head node before running
slurm-update-idle-nodes unless you really know what you are doing.

If you have already started updating idle compute nodes, it would be best
to allow the updates to finish before updating the head node.

============================================================================
EOM
    pause
}

##########################################################################
#   Function description:
#       
#   Arguments:
#       
#   Returns:
#       
#   History:
#   Date        Name        Modification
#   2019-01-24  root        Begin
##########################################################################

get_node_type()
{
    node_type=none
    while [ $node_type = none ]; do
	cat << EOM

1.. Backup head nodes
2.. File servers
3.. Compute nodes
4.. Visualization nodes

EOM
	read node_type
	case $node_type in
	1)
	    node_type=head
	    default_digits=1
	    default_prefix=login-
	    ;;
	2)
	    node_type=io
	    default_digits=2
	    default_prefix=raid-
	    ;;
	3)
	    node_type=compute
	    default_digits=3
	    default_prefix=compute-
	    ;;
	4)
	    node_type=vis
	    default_digits=1
	    default_prefix=vis-
	    ;;
	*)
	    printf "Invalid selection.\n"
	    return 1
	esac
    done
    echo $node_type
}


default_responses_info()
{
    cat << EOM

At least one node must be configured before using default responses to
all prompts.

/usr/local/cluster should also contain fstab fragments for all NFS mounts.

EOM
}


##########################################################################
#   Main
##########################################################################

if [ $# != 0 ]; then
    usage
fi

sinfo_format='%T %u %E %N'
updates_dir="/home/slurm/Compute-node-updates"
for prefix in /usr/local /usr/pkg; do
    if [ -e $prefix/etc/slurm.conf ]; then
	default_domain=`awk -F = '$1 == "ClusterName" { print $2 }' $prefix/etc/slurm.conf`
    fi
done

while true; do

    clear
    cat << EOM
    
			    **************************
				  Node Admin Menu
			    **************************
******************************************************************************
				*** WARNING ***
Installing updates remotely is not recommended.  Servers often fail to
reboot, so you should be physically nearby in case of issues.
******************************************************************************

1.. PXE install new nodes
2.. Initialize new nodes
3.. Synchronize nodes
4.. Install updates on backup head node
5.. Verify scheduler restart on backup head node
6.. Install updates on head node
7.. Install updates on visualization nodes
8.. Install updates on File servers
9.. Install updates on idle compute nodes
10. Restart cron updates on idle compute nodes
11. Drain a node
12. Resume a node
13. Drain all nodes
14. Shut down idle nodes
Q.. Quit

EOM

    read -p "Selection? " selection
    clear
    case $selection in
    
    1)  # PXE
	read -p "Host name prefix? [compute-] " host_prefix
	if [ 0$host_prefix = 0 ]; then
	    host_prefix='compute-'
	fi
	read -p "Digits in hostname #? [3] " host_digits
	if [ 0$host_digits = 0 ]; then
	    host_digits=3
	fi
	read -p "Domain? [$default_name] " domain
	if [ 0$domain = 0 ]; then
	    domain='$default_name'
	fi
	auto-pxe-node-discover $host_prefix $host_digits $domain
	;;
    
    2)  # Initialize
	if get_node_type; then
	    read -p "Host name prefix? [$default_prefix] " host_prefix
	    if [ 0$host_prefix = 0 ]; then
		host_prefix=$default_prefix
	    fi
	    read -p "Domain? [$default_domain] " domain
	    if [ 0$domain = 0 ]; then
		domain=$default_domain
	    fi
	    if get_host_info $default_digits; then
		read -p "Unattended init? y/[n] " unattended
		if [ 0$unattended = 0y ]; then
		    flags=--unattended
		fi
		num=$first_num
		while [ $num -le $last_num ]; do
		    node=`printf '%s%0*d.%s' $host_prefix $host_digits $num $domain`
		    cluster-init-node $flags $node $node_type || true
		    printf "Done with $node...\n"
		    num=$((num + 1))
		done
	    fi
	fi
	;;
    
    3)  
	if get_node_type; then
	    case $node_type in
	    io|vis|head)
		# Sync File servers
		read -p"Fully qualified host name? " node
		if [ 0$node != 0 ]; then
		    default_responses_info
		    read -p "Default responses to all prompts? y/[n] " use_defaults
		    if [ 0$use_defaults = 0y ]; then
			read -p "Reference node for binary packages? " ref_node
			sync_opts="--use-defaults $ref_node"
		    fi
		    printf "Synchronizing $node...\n"
		    cluster-sync-node $sync_opts $node $node_type || true
		    printf "Done with $node...\n"
		fi
		;;
    
	    compute)
		# Sync compute nodes
		sinfo
		read -p "Host name prefix? [compute-] " host_prefix
		if [ 0$host_prefix = 0 ]; then
		    host_prefix='compute-'
		fi
		read -p "Domain? [$default_domain] " domain
		if [ 0$domain = 0 ]; then
		    domain=$default_domain
		fi
		if get_host_info 3; then
		    default_responses_info
		    read -p "Default responses to all prompts? y/[n] " use_defaults
		    if [ 0$use_defaults = 0y ]; then
			read -p "Reference node for binary packages? " ref_node
			sync_opts="--use-defaults $ref_node"
			read -p "Automatically configure infiniband on all nodes? y/[n] " infiniband
			if [ 0$infiniband = 0y ]; then
			    sync_opts="$sync_opts --infiniband"
			fi
		    fi
		    num=$first_num
		    while [ $num -le $last_num ]; do
			node=`printf '%s%0*d.%s' $host_prefix $host_digits $num $domain`
			printf "Synchronizing $node...\n"
			cluster-sync-node $sync_opts $node $node_type || true
			printf "Done with $node...\n"
			num=$((num + 1))
		    done
		fi
		;;
	    esac
	fi
	;;
    
    4)  # Update backup head node
	cluster-update-backup-nodes || true
	
	cat << EOM
	
Verify that the backup head node is rebooted and fully functional before
updating the primary head node.

EOM
	pause
	;;
    
    5)  # Verify scheduler running on backup head node
	ssh login-2 tail /var/log/slurm/slurmctld.log || true
	;;
    
    6)  # Update login node
	update_warning
	w
	read -p 'Continue? y/[n] ' continue
	if [ 0$continue = 0y ]; then
		cat << EOM | wall

The head node may need to be rebooted shortly to complete the installation of
important security updates.  An additional notice will follow if a reboot
is necessary.

EOM
	    auto-update-system --binary
	    read -p "Reboot? [y]/n " reboot
	    if [ `auto-ostype` = FreeBSD ]; then
		read -p "Update and sync ports tree to all nodes? [y]/n " portsnap
		if [ 0$portsnap != 0n ]; then
		    # Update local wip first, then rsync the whole ports tree
		    # to other nodes
		    if [ -e /usr/local/sbin/wip-update ]; then
			wip-update
		    fi
		    cluster-portsnap
		fi
	    fi
	    w
	    if [ 0$reboot != 0n ]; then
		read -p "Minutes before reboot? [2] " minutes
		if [ 0$minutes = 0 ]; then
		    minutes=2
		fi
		cat << EOM | wall

The head node will be rebooted shortly to complete the installation of
important security updates.  It should be available again in a few minutes.

EOM
		shutdown -r +$minutes
	    fi
	fi
	;;
    
    7)
	cluster-update-vis-nodes || true
	;;
    
    8)
	cluster-update-file-servers || true
	;;
    
    9) # Update all compute nodes
	update_warning
	cat << EOM

You can update all compute nodes, or just those that have not received the
last round of updates.

EOM
	mkdir -p $updates_dir
	read -p "Update all compute nodes? y/[n] " update_all
	if [ 0$update_all = 0y ]; then
	    rm -f $updates_dir/updated-nodes
	fi
	slurm-update-idle-nodes $updates_dir
	;;
    
    10) # Schedule compute node updates in cron
	clear
	update_warning
	cat << EOM

This will clear the updated-nodes list from the last round of cron updates.

All compute nodes will be immediately set to draining state to prevent them
from receiving any new jobs before they are updated.

Be sure all head nodes and file servers are up before proceeding.

Nodes will be updated one at a time shortly after they become idle.

Note: cron must be configured with an entry like the following:

    0-59/15 * * * * slurm-update-idle-nodes --yes \\
	    >> /var/log/compute-node-updates 2>&1

slurm-update-idle-nodes and scripts it depends on must be in PATH.

EOM
	read -p "Proceed? y/[n] " proceed
	if [ 0"$proceed" = 0y ]; then
	    rm -f $updates_dir/updated-nodes $updates_dir/updates.log
	fi
	;;

    11)
	clear
	printf "Current node status:\n\n"
	sinfo -o "$sinfo_format"
	printf "\nNode number? (e.g. 001) "
	read node
	if [ 0$node != 0 ]; then
	    printf "Reason? "
	    read reason
	    if [ 0$reason != 0 ]; then
		scontrol update State=drain NodeName=compute-$node reason="$reason"
		sinfo --list-reasons
		printf "Update slurm.conf if this is a long-term outage.\n"
	    fi
	fi
	;;
    12)
	clear
	printf "Nodes currently down:\n\n"
	sinfo --list-reasons
	printf "\nNode number? (e.g. 001) "
	read node
	if [ 0$node != 0 ]; then
	    full_name=`awk '$3 == "compute-'$node'" { print $2 }' /etc/hosts`
	    slurm-resume-nodes $full_name
	fi
	;;
    
    13) # Drain all nodes
	printf "This will prevent any new jobs from running.\n"
	printf "Are you sure you want to proceed? yes/[no] "
	read proceed
	if [ 0$proceed = 0yes ]; then
	    read -p "Reason for draining all nodes? " reason
	    all_nodes=`sinfo -ho '%N'`
	    scontrol update state=drain nodename="$all_nodes" reason="$reason"
	    sinfo
	else
	    printf "Operation canceled.\n"
	fi
	;;

    14)
	slurm-shutdown-idle-nodes
	;;

    Q|q)
	exit 0
	;;
    
    *)
	printf "Invalid selection: '$selection'\n"
	;;
    esac
    pause
done
